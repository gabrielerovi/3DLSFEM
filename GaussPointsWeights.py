from dolfin import *
import numpy as np


def TriGaussPoints2D(qrule):


 if(qrule == 1):
  xy_qp=np.array([[0.33333333333333],[0.33333333333333]])
  w_qp=np.array([1.00000000000000])
 elif (qrule == 2):
  xy_qp=np.array([[0.16666666666667, 0.16666666666667], 
                  [0.16666666666667, 0.66666666666667],
                  [0.66666666666667, 0.16666666666667 ]])
  w_qp=np.array([0.33333333333333, 0.33333333333333,  0.33333333333333 ])
 
 elif (qrule == 3):
  xy_qp=np.array([[0.33333333333333, 0.33333333333333],
                 [0.20000000000000, 0.20000000000000],
                 [0.20000000000000, 0.60000000000000], 
                 [0.60000000000000, 0.20000000000000]])
        
  w_qp=np.array([-0.56250000000000, 0.52083333333333, 0.52083333333333, 0.52083333333333  ]).reshape(4,1)    
 elif (qrule == 4):
  xy_qp=np.array([[0.44594849091597, 0.44594849091597],
                  [0.44594849091597, 0.10810301816807],
                  [0.10810301816807, 0.44594849091597],
                  [0.09157621350977, 0.09157621350977], 
                  [0.09157621350977, 0.81684757298046],
                  [0.81684757298046, 0.09157621350977]])
  w_qp=np.array([0.22338158967801,  0.22338158967801,   0.22338158967801, 0.10995174365532, 0.10995174365532, 0.10995174365532]).reshape(6,1)    
 
 return xy_qp,w_qp 

    
    
    
def TriGaussPoints3D(qrule):
# Quadrature data for tetrahedron
# Refs
# P Keast, Moderate degree tetrahedral quadrature formulas, CMAME 55: 339-348 (1986)
#  O. C. Zienkiewicz, The Finite Element Method,  Sixth Edition,

 if(qrule==1):
  
  x_qp=np.array( [0.5854101966249685, 0.1381966011250105, 0.1381966011250105, 0.1381966011250105] ).reshape(4,1)      
  y_qp=np.array( [0.1381966011250105, 0.1381966011250105, 0.1381966011250105, 0.5854101966249685] ).reshape(4,1)    
  z_qp=np.array( [0.1381966011250105, 0.1381966011250105, 0.5854101966249685, 0.1381966011250105] ).reshape(4,1)    
  w_qp=np.array( [0.2500000000000000/6, 0.2500000000000000/6, 0.2500000000000000/6, 0.2500000000000000/6]).reshape(4,1)    

 elif(qrule==2):  
  x_qp=np.array( [0.2500000000000000, 0.5000000000000000, 0.1666666666666667, 0.1666666666666667, 0.1666666666666667]).reshape(5,1)    
  y_qp=np.array( [0.2500000000000000, 0.1666666666666667, 0.1666666666666667, 0.1666666666666667, 0.5000000000000000]).reshape(5,1)    
  z_qp=np.array( [0.2500000000000000, 0.1666666666666667, 0.1666666666666667, 0.5000000000000000, 0.1666666666666667]).reshape(5,1)    
  w_qp=np.array( [-0.8000000000000000/6, 0.4500000000000000/6, 0.4500000000000000/6, 0.4500000000000000/6, 0.4500000000000000/6]).reshape(5,1)    

 elif(qrule==3):
  x_qp=np.array( [0.2500000000000000, 0.7857142857142857, 0.0714285714285714, 0.0714285714285714, 0.0714285714285714, 
     0.1005964238332008, 0.3994035761667992, 0.3994035761667992, 0.3994035761667992, 0.1005964238332008, 0.1005964238332008]).reshape(11,1)    
  y_qp=np.array( [0.2500000000000000, 0.0714285714285714, 0.0714285714285714, 0.0714285714285714, 0.7857142857142857, 
     0.3994035761667992, 0.1005964238332008, 0.3994035761667992, 0.1005964238332008, 0.3994035761667992, 0.1005964238332008]).reshape(11,1) 
  z_qp=np.array( [0.2500000000000000, 0.0714285714285714, 0.0714285714285714, 0.7857142857142857, 0.0714285714285714, 
     0.3994035761667992, 0.3994035761667992, 0.1005964238332008, 0.1005964238332008, 0.1005964238332008, 0.3994035761667992]).reshape(11,1) 
  w_qp=np.array( [-0.0789333333333333/6, 0.0457333333333333/6, 0.0457333333333333/6, 0.0457333333333333/6, 0.0457333333333333/6, 
     0.1493333333333333/6, 0.1493333333333333/6, 0.1493333333333333/6, 0.1493333333333333/6, 0.1493333333333333/6, 0.1493333333333333/6]).reshape(11,1) 

 elif(qrule==4):
  x_qp=np.array( [0.2500000000000000, 0.0000000000000000, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 
                  0.7272727272727273, 0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.4334498464263357, 
                  0.0665501535736643, 0.0665501535736643, 0.0665501535736643, 0.4334498464263357, 0.4334498464263357]).reshape(15,1) 
  y_qp=np.array( [0.2500000000000000, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0000000000000000, 
                  0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.7272727272727273, 0.0665501535736643, 
                  0.4334498464263357, 0.0665501535736643, 0.4334498464263357, 0.0665501535736643, 0.4334498464263357]).reshape(15,1) 
  z_qp=np.array( [0.2500000000000000, 0.3333333333333333, 0.3333333333333333, 0.0000000000000000, 0.3333333333333333, 
                  0.0909090909090909, 0.0909090909090909, 0.7272727272727273, 0.0909090909090909, 0.0665501535736643, 
                  0.0665501535736643, 0.4334498464263357, 0.4334498464263357, 0.4334498464263357, 0.0665501535736643]).reshape(15,1) 
  w_qp=np.array( [0.1817020685825351/6, 0.0361607142857143/6, 0.0361607142857143/6, 0.0361607142857143/6, 0.0361607142857143/6, 
                  0.0698714945161738/6, 0.0698714945161738/6, 0.0698714945161738/6, 0.0698714945161738/6, 0.0656948493683187/6,
                  0.0656948493683187/6, 0.0656948493683187/6, 0.0656948493683187/6, 0.0656948493683187/6, 0.0656948493683187]).reshape(15,1) 
 return x_qp,y_qp,z_qp,w_qp
       