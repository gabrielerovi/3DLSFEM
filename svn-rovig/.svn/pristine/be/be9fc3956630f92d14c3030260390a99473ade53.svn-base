function [J,detJ]=J_and_detJ(node)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% F(x)= J X + C                                                                     %%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    J=[ node(2,1)-node(1,1), node(3,1)-node(1,1), node(4,1)-node(1,1);
        node(2,2)-node(1,2), node(3,2)-node(1,2), node(4,2)-node(1,2);
        node(2,3)-node(1,3), node(3,3)-node(1,3), node(4,3)-node(1,3);];
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
%%%%%%% We use the controvariant Piola transform that preserves normals:                       %%%%%%%
%%%%%%% phi=1/detJ JPHI(F^-1 x)                                                                %%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %detJ=det(J);
    detJ= J(1,1)*(J(2,2)*J(3,3)-J(3,2)*J(2,3) ) - J(1,2) * ( J(2,1)*J(3,3)-J(3,1)*J(2,3) ) +J(1,3) * (J(2,1)*J(3,2)-J(3,1)*J(2,2) );
end

    
    