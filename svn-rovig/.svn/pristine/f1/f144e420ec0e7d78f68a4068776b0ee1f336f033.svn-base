
function [Ant,Complementarity,bnt,bnt1]=create_system_LSelasticityContact(parameters,mesh,h,P)

% problem coefficients
qrule=parameters.qrule;
L=length(mesh);
NF=mesh{L}.NF;
N=mesh{L}.N;
NT=mesh{L}.NT;
dim=parameters.dim;
face_per_elem=mesh{L}.face_per_elem;
node_per_elem=mesh{L}.node_per_elem;

% coefficients 
Ceq=parameters.C_eq;
Cconst=parameters.C_const;
Casym=parameters.C_asym;
qrule=parameters.qrule;
alpha=parameters.alpha;
beta=parameters.beta;






Ant=sparse(dim*(N+NF),dim*(N+NF));
bnt=sparse(dim*(N+NF),1);
for t=1:NT

elem=mesh{L}.elem(t,:);
node=mesh{L}.node(elem,:);
elemF=mesh{L}.elemF(t,:);

Mss=assembling_SigmaSigma(qrule,node,face_per_elem,alpha,beta,Ceq,Cconst,Casym);
Msu=assembling_SigmaU(qrule,node,node_per_elem,face_per_elem,alpha,beta,Ceq,Cconst,Casym);
Muu=assembling_UU(qrule,node,node_per_elem,alpha,beta,Ceq,Cconst,Casym);
bss=assembling_b(qrule,node,face_per_elem,parameters.force1,parameters.force2,parameters.force3,Ceq);


for mm=1:3
for nn=1:3
   Ant(elemF + (mm-1) * NF ,elemF + (nn-1) * NF )=Mss{mm,nn};
   Ant(3 * NF + elem + (mm-1) * N ,3 * NF + elem + (nn-1) * N )=Muu{mm,nn};
   Ant(elemF + (mm-1) * NF ,3 * NF + elem + (nn-1) * N )=Msu{mm,nn};
   Ant(3 * NF + elem + (nn-1) * N ,elemF + (mm-1) * NF )=Msu{mm,nn}';
end
end

for mm=1:3
    bnt(elemF + (mm-1) *NF,1)=bss{mm};
end




end


[M_Normal_Tangent] = MatrixOnGammaCwithNormalTangentComponents(mesh{L});

Ant = M_Normal_Tangent * Ant * M_Normal_Tangent';
bnt = M_Normal_Tangent * bnt;

[Complementarity,bnt_complementarityL] =ComplementarityConditionNT3D(L,mesh,parameters);

bnt = bnt + bnt_complementarityL;

















bnt1=sparse(dim*(mesh{1}.N+mesh{1}.NF),1);

for t=1:mesh{1}.NT

elem=mesh{1}.elem(t,:);
node=mesh{1}.node(elem,:);
elemF=mesh{1}.elemF(t,:);
bss=assembling_b(qrule,node,face_per_elem,parameters.force1,parameters.force2,parameters.force3,Ceq);
for mm=1:3
    bnt1(elemF + (mm-1) *mesh{1}.NF,1)=bss{mm};
end
end





[Complementarity1,bnt_complementarity1] =ComplementarityConditionNT3D(1,mesh,parameters);


[M_Normal_Tangent] = MatrixOnGammaCwithNormalTangentComponents(mesh{1});


bnt1 = M_Normal_Tangent * bnt1;
bnt1 = bnt1 + h(1)/h(L) * bnt_complementarity1;



clearvars Complementarity1
clearvars M_Normal_Tangent

b_tmp{1}=bnt1;
b_tmp{2}=bnt;
cont=0;
for lev=[1,L]
cont=cont+1;
F_remove=mesh{lev}.F_remove;
N_remove=mesh{lev}.N_remove;
F_label=mesh{lev}.F_label;
N_label=mesh{lev}.N_label;
NF=mesh{lev}.NF;
N=mesh{lev}.N;

FcontBC=0;
type_of_dof=3;
for ii=F_remove
    FcontBC=FcontBC+1;
    tmp=add_boundary_bc_elasticity3D(type_of_dof,F_label(FcontBC),dim);  
    coeff = phi_dot_n(mesh{lev},ii);
    jj1=ii;
    jj2=ii+NF;    
    jj3=ii+2*NF;    
    b_tmp{cont}(jj1)=tmp(1)/coeff;
    b_tmp{cont}(jj2)=tmp(2)/coeff;
    b_tmp{cont}(jj3)=tmp(3)/coeff;
end

NcontBC=0;
type_of_dof=1;
for ii=N_remove
    NcontBC=NcontBC+1;
    tmp=add_boundary_bc_elasticity3D(type_of_dof,N_label(NcontBC),dim);   
    jj1=ii+3*NF;
    jj2=ii+3*NF+N;
    jj3=ii+3*NF+2*N;
    b_tmp{cont}(jj1)=tmp(1);
    b_tmp{cont}(jj2)=tmp(2);
    b_tmp{cont}(jj3)=tmp(3);
end
end

bnt=b_tmp{2};
bnt1=b_tmp{1};

end
